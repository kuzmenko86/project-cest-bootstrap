<?php

namespace ISM\Tool;

use \ISM\Intface\CommandIntface;

class CommBuildTool implements CommandIntface
{
    protected $_src = null;
    protected $_trg = null;
    protected $_srcHandle = null;
    protected $_trgHandle = null;

    protected $_generatedMethods  = array();
    protected $_targetLines  = array();

    const SOURCE_SEARCH_REGEXP = '~public function (.*) {~';

    public function execute()
    {
        $result = true;
        if (is_null($this->_src) || is_null($this->_trg)) {
            return false;
        }

        if (! $result = $this->generateMethods() ) {
            return $result;
        }

        if (! $result = $this->generateTargetLines()) {
            return $result;
        }

        if (! $result = $this->writeResult()) {
            return $result;
        }

        return $result;
    }

    public function setSource($src)
    {
        $this->_src = $src;
    }

    public function setTarget($trg)
    {
        $this->_trg = $trg;
    }

    public function getGeneratedMethods()
    {
        return $this->_generatedMethods;
    }

    public function getTargetLines()
    {
        return $this->_targetLines;
    }

    public function openSrcFile()
    {
        if ($this->_srcHandle) {
            return true;
        }
        $handle = @fopen($this->_src, "r");
        if ($handle) {
            $this->_srcHandle = $handle;
            return true;
        } else {
            return false;
        }

    }

    public function openTrgFile($mode = 'r')
    {
        if ($this->_trgHandle) {
            return true;
        }
        $handle = @fopen($this->_trg, $mode);
        if ($handle) {
            $this->_trgHandle = $handle;
            return true;
        } else {
            return false;
        }

    }

    public function generateMethods()
    {
        if (is_null($this->_srcHandle)) {
            $result = $this->openSrcFile();
            if (! $result) {
                return false;
            }
        }

        if ($this->_srcHandle) {
            while (($line = fgets($this->_srcHandle)) !== false) {
                $matches = array();
                $result = preg_match(static::SOURCE_SEARCH_REGEXP, $line, $matches);
                if ($result) {
                    $this->_generatedMethods[] = " * @method \\ISM\\BasePage " . $matches[1];
                }
                unset($matches);
            }
        } else {
            echo "ERROR. Can not open file " . $this->_src;
            return false;
        }

        fclose($this->_srcHandle);
        $this->_srcHandle = null;
        return true;
    }

    public function generateTargetLines()
    {
        if (is_null($this->_trgHandle)) {
            $result = $this->openTrgFile();
            if (! $result) {
                return false;
            }
        }

        if ($this->_trgHandle) {
            $beginProxiedGenerateAutoBlock = false;
            $endProxiedGenerateAutoBlock = false;
            $lines = array();

            while (($line = fgets($this->_trgHandle)) !== false) {
                $matches = array();

                if ( $beginProxiedGenerateAutoBlock ) {
                    $resultEnd = preg_match('~# autogenerated-proxied-methods-end~', $line, $matches);
                    if ($resultEnd) {
                        $beginProxiedGenerateAutoBlock = false;
                    }
                }

                if ( !$beginProxiedGenerateAutoBlock ) {
                    $resultBegin = preg_match('~# autogenerated-proxied-methods-start~', $line, $matches);
                    if ($resultBegin) {
                        $this->_targetLines[] = $line;
                        $beginProxiedGenerateAutoBlock = true;
                        foreach($this->getGeneratedMethods() as $method) {
                            $this->_targetLines[] = $method . PHP_EOL;
                        }
                    }
                }

                if ( $beginProxiedGenerateAutoBlock == false ) {
                    $this->_targetLines[] = $line;
                }

                unset($matches);
            }
        } else {
            echo "ERROR. Cannot open file " . $this->_trg;
            return false;
        }

        fclose($this->_trgHandle);
        $this->_trgHandle = null;
        return true;
    }

    public function writeResult()
    {
        if ($this->_trgHandle) {
            fclose($this->_trgHandle);
        }

        if (!$result = $this->openTrgFile('w')) {
            return false;
        }

        if ($this->_trgHandle) {
            $countLines = 0;
            foreach($this->getTargetLines() as $line) {
                fputs($this->_trgHandle, $line);
                $countLines++;
            }
            echo "INFO. Write to target files {$countLines} lines" . PHP_EOL;
        }

        fclose($this->_trgHandle);
        return true;
    }
}